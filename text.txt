Skip to content
You said:
how to add to asg scaling up when ecs cpu above 60% and scale down when ecs cpu below 40%
use the modules asg and ecs cluster / ECS Service instead of resources
ChatGPT said:
To set up auto-scaling for an ECS service based on CPU utilization, using Terraform and modules for Auto Scaling Groups (ASG) and ECS Cluster/ECS Service, you can follow these general steps:

Here’s how you can define the scaling rules in Terraform using AWS Auto Scaling Policies for ECS CPU utilization. You need to create ECS service auto-scaling policies in combination with CloudWatch metrics to adjust the desired task count based on CPU utilization.

Below is an example Terraform code snippet that shows how you can achieve this:

1. Define your ECS Cluster and Service (ECS Service with CPU Metrics)
You should already have an ECS cluster and ECS service defined, but here is an example to illustrate.

module "ecs_cluster" {
  source = "terraform-aws-modules/ecs/aws"
  cluster_name = "my-cluster"
}

module "ecs_service" {
  source = "terraform-aws-modules/ecs/aws"
  cluster_name = module.ecs_cluster.cluster_id
  name          = "my-service"
  task_definition = aws_ecs_task_definition.my_task_definition.arn
  desired_count  = 1
  # Other parameters like load balancer, network config, etc.
}
2. Define an Auto Scaling Group (ASG)
You can set up the Auto Scaling Group for your ECS tasks if you want to scale EC2 instances dynamically. ECS also supports Fargate, where you might not need ASG, but we'll assume you're using EC2 here.

module "asg" {
  source = "terraform-aws-modules/autoscaling/aws"
  name = "my-asg"
  min_size = 1
  max_size = 5
  desired_capacity = 2
  vpc_zone_identifier = var.subnet_ids
  # Additional parameters like Launch configuration or Launch template
}
3. Create CloudWatch Alarms for Scaling Up and Scaling Down
You will create CloudWatch alarms based on ECS CPU utilization. These alarms will trigger scaling policies for your ECS service.

resource "aws_cloudwatch_metric_alarm" "scale_up" {
  alarm_name                = "ecs-cpu-scale-up"
  comparison_operator       = "GreaterThanThreshold"
  evaluation_periods        = 1
  metric_name               = "CPUUtilization"
  namespace                 = "AWS/ECS"
  period                    = 60
  statistic                 = "Average"
  threshold                 = 60
  alarm_description         = "Scale ECS service up when CPU > 60%"
  dimensions = {
    ClusterName = module.ecs_cluster.cluster_id
    ServiceName = module.ecs_service.service_name
  }

  actions_enabled = true
  alarm_actions  = [aws_appautoscaling_policy.scale_up.arn]
}

resource "aws_cloudwatch_metric_alarm" "scale_down" {
  alarm_name                = "ecs-cpu-scale-down"
  comparison_operator       = "LessThanThreshold"
  evaluation_periods        = 1
  metric_name               = "CPUUtilization"
  namespace                 = "AWS/ECS"
  period                    = 60
  statistic                 = "Average"
  threshold                 = 40
  alarm_description         = "Scale ECS service down when CPU < 40%"
  dimensions = {
    ClusterName = module.ecs_cluster.cluster_id
    ServiceName = module.ecs_service.service_name
  }

  actions_enabled = true
  alarm_actions  = [aws_appautoscaling_policy.scale_down.arn]
}
4. Define Auto Scaling Policies for ECS Service
Now create the scaling policies that adjust the desired count of ECS tasks.

resource "aws_appautoscaling_target" "ecs_service_target" {
  max_capacity = 10
  min_capacity = 1
  resource_id  = "service/${module.ecs_cluster.cluster_id}/${module.ecs_service.service_name}"
  scalable_dimension = "ecs:service:DesiredCount"
  service_namespace  = "ecs"
}

resource "aws_appautoscaling_policy" "scale_up" {
  name                   = "ecs-service-scale-up"
  policy_type            = "StepScaling"
  resource_id           = aws_appautoscaling_target.ecs_service_target.resource_id
  scalable_dimension    = aws_appautoscaling_target.ecs_service_target.scalable_dimension
  service_namespace     = "ecs"
  adjustment_type       = "ChangeInCapacity"
  cooldown              = 300
  metric_aggregation_type = "Average"
  step_adjustment {
    scaling_adjustment = 1
    metric_interval_lower_bound = 0
  }
}

resource "aws_appautoscaling_policy" "scale_down" {
  name                   = "ecs-service-scale-down"
  policy_type            = "StepScaling"
  resource_id           = aws_appautoscaling_target.ecs_service_target.resource_id
  scalable_dimension    = aws_appautoscaling_target.ecs_service_target.scalable_dimension
  service_namespace     = "ecs"
  adjustment_type       = "ChangeInCapacity"
  cooldown              = 300
  metric_aggregation_type = "Average"
  step_adjustment {
    scaling_adjustment = -1
    metric_interval_upper_bound = 0
  }
}
5. Apply the Configuration
Once you've written the configuration above, apply it using Terraform:

terraform init
terraform apply
Explanation:
ECS Cluster & Service: The ECS cluster and service are defined as modules. The ecs_cluster module manages the ECS cluster, and the ecs_service module handles the ECS service.
Auto Scaling Group: If you're using EC2 instances, the asg module creates an Auto Scaling Group (ASG).
CloudWatch Alarms: The alarms will monitor CPU utilization on the ECS service. The scaling up alarm triggers when CPU utilization exceeds 60%, and the scaling down alarm triggers when CPU utilization is below 40%.
Auto Scaling Policies: These define the scale-up and scale-down behavior. The scale-up policy increases the desired count of ECS tasks, and the scale-down policy decreases the desired count.
Make sure that you have the necessary permissions and that your ECS tasks and services are appropriately set up to be scaled by the Auto Scaling policies.


“`module "ecs_cluster" { source = "terraform-aws-modules/ecs/aws" cluster_name = "my-cluster" } module "ecs_service" { source = "terraform-aws-modules/ecs/aws" cluster_name = module.ecs_cluster.cluster_id name = "my-service" task_definition = aws_ecs_task_definition.my_task_definition.arn desired_count = 1 # Other parameters like load balancer, network config, etc. }`”


Attach

Search

Reason

Voice
ChatGPT can make mistakes. Check important info.
?
